import cron from "node-cron";
import schedule from "node-schedule";
import axios from "axios";
import PlayerSV01 from "../models/player.js";
import DaylyPoint from "../models/daylyPoints.js";
import Alliance from "../models/Alliance.js";
import ClanSV01 from "../models/Clan.js";
import WarDetail from "../models/warDetailModel.js";
import WarScore from "../models/warScoreMolde.js";
import ClanStats from "../models/ClanStats.js";

//K·∫øt lu·∫≠n k·∫øt qu·∫£ war
function concludeWarResult(war) {
  if (!war || war.state !== "warEnded") return null;
  const { clan, opponent } = war;
  if (clan.stars > opponent.stars) return "win";
  if (clan.stars < opponent.stars) return "lost";
  if (clan.destructionPercentage > opponent.destructionPercentage) return "win";
  if (clan.destructionPercentage < opponent.destructionPercentage)
    return "lost";
  return "draw";
}

// L·∫•y ng√†y Vi·ªát Nam (UTC+7) v·ªõi offset ng√†y
export function getVNDate(offsetDays = 0) {
  const now = new Date();
  now.setHours(now.getHours() + 7);
  now.setDate(now.getDate() + offsetDays);
  return now.toISOString().slice(0, 10);
}

/**
 * H√†m t√≠nh ƒëi·ªÉm cho player d·ª±a tr√™n d·ªØ li·ªáu hi·ªán t·∫°i v√† ƒëi·ªÉm ng√†y tr∆∞·ªõc
 * @param {Object} player - Th√¥ng tin player hi·ªán t·∫°i
 * @param {Object} prevPoint - ƒêi·ªÉm ng√†y tr∆∞·ªõc c·ªßa player
 * @param {string} clanTag - Tag c·ªßa clan
 * @returns {Object} Tr·∫£ v·ªÅ c√°c ƒëi·ªÉm ƒë√£ t√≠nh to√°n
 */
async function calculatePlayerPoints(player, prevPoint, clanTag) {
  try {
    // L·∫•y ClanStats ƒë·ªÉ t√≠nh warPoints
    const ClanStatsData = await ClanStats.findOne({ clanTag });
    const playerStats =
      ClanStatsData?.players.find((p) => p.playerTag === player.tag)
        ?.totalScore || 0;

    // 1. T√≠nh warPoints
    const warPointValue = Math.min(Math.max(playerStats, 0), 100);

    // 2. T√≠nh activepoints
    let activePointValue = prevPoint.activepoints?.value || 0;
    const prevAttackWins = prevPoint.attackWins || 0;

    if (prevAttackWins < player.attackWins) {
      // C√≥ th·∫Øng th√™m tr·∫≠n ‚Üí c·ªông ƒëi·ªÉm (t·ªëi ƒëa 3 ƒëi·ªÉm)
      activePointValue += Math.min(player.attackWins - prevAttackWins, 3);
    } else {
      // Kh√¥ng th·∫Øng th√™m tr·∫≠n ‚Üí tr·ª´ 2 ƒëi·ªÉm
      activePointValue -= 2;
    }
    activePointValue = Math.min(Math.max(activePointValue, 0), 100); // Gi·ªõi h·∫°n 0-100

    // 3. Gi·ªØ nguy√™n clanGamePoints
    const clanGamePointValue = prevPoint.clanGamePoints?.value || 0;

    // 4. T√≠nh InfluencePoints d·ª±a tr√™n c√¥ng th·ª©c
    const raw =
      0.35 * Math.log(1 + activePointValue) +
      0.25 * Math.log(1 + warPointValue) +
      0.1 * Math.log(1 + player.donations) +
      0.05 * Math.log(1 + player.donationsReceived) +
      0.25 * Math.log(1 + clanGamePointValue);

    const influence = Math.min(Math.max(Math.round((raw / 6) * 100), 0), 100);
    const influencePointValue = influence;

    // 5. Tr·∫£ v·ªÅ k·∫øt qu·∫£ v·ªõi gi·ªØ nguy√™n tr·∫°ng th√°i hidden t·ª´ ng√†y tr∆∞·ªõc
    return {
      warPoints: {
        value: warPointValue,
        hidden: prevPoint.warPoints?.hidden || false,
      },
      InfluencePoints: {
        value: influencePointValue,
        hidden: prevPoint.InfluencePoints?.hidden || false,
      },
      activepoints: {
        value: activePointValue,
        hidden: prevPoint.activepoints?.hidden || false,
      },
      clanGamePoints: {
        value: clanGamePointValue,
        hidden: prevPoint.clanGamePoints?.hidden || false,
      },
    };
  } catch (error) {
    console.error(`‚ùå L·ªói khi t√≠nh ƒëi·ªÉm cho player ${player.name}:`, error);

    // Tr·∫£ v·ªÅ ƒëi·ªÉm m·∫∑c ƒë·ªãnh n·∫øu c√≥ l·ªói
    return {
      warPoints: { value: 0, hidden: false },
      InfluencePoints: { value: 0, hidden: false },
      activepoints: { value: 0, hidden: false },
      clanGamePoints: { value: 0, hidden: false },
    };
  }
}

// L√™n l·ªãch ch·∫°y c√¥ng vi·ªác v√†o m·ªói 2 ph√∫t (t√≠nh warScore)
cron.schedule("*/2 * * * *", async () => {
  try {
    const wars = await WarDetail.find({}).sort({ endTime: -1 }).limit(100);
    for (const war of wars) {
      const exists = await WarScore.exists({ war: war._id });
      if (exists || war.state !== "warEnded") continue;

      const membersOfwarScore = [];
      const ourTeam = war.clan.members || [];
      const theirTeam = war.opponent.members || [];
      const theirAttackMap = new Map();
      for (const member of theirTeam) {
        const attackerTag = member.bestOpponentAttack?.attackerTag;
        if (!attackerTag) continue;
        const list = theirAttackMap.get(attackerTag) || [];
        list.push(member);
        theirAttackMap.set(attackerTag, list);
      }
      const unDestroyedBases = theirTeam.filter(
        (m) => (m.bestOpponentAttack?.stars ?? 0) < 3
      );
      const allAttacks = ourTeam.flatMap((m) => m.attacks || []);
      const maxOrder =
        allAttacks.length > 0 ? Math.max(...allAttacks.map((a) => a.order)) : 0;

      const members = ourTeam.map((ourMember) => {
        const attacksArr = ourMember.attacks || [];
        const objmember = {
          tag: ourMember.tag,
          name: ourMember.name,
          score: 0,
          title: { keyWarrior: 0, giantSlayer: 0, drop: 0, lastHit: false },
          attacks: attacksArr.length,
        };
        const attackedMembers = theirAttackMap.get(ourMember.tag) || [];
        objmember.title.keyWarrior = attackedMembers.length;
        for (const attackedMember of attackedMembers) {
          const stars = attackedMember.bestOpponentAttack?.stars ?? 0;
          if (
            stars === 3 &&
            ourMember.townhallLevel < attackedMember.townhallLevel
          ) {
            objmember.title.giantSlayer += 1;
          }
        }
        const remain = war.attacksPerMember - attacksArr.length;
        if (remain > 0) {
          let dropCount = 0;
          for (const base of unDestroyedBases) {
            if (base.townhallLevel > ourMember.townhallLevel) continue;
            const alreadyAttacked = attacksArr.some(
              (a) => a.defenderTag === base.tag
            );
            if (alreadyAttacked) continue;
            dropCount++;
            if (dropCount >= remain) break;
          }
          objmember.title.drop = dropCount;
        }
        if (objmember.title.drop > 0) {
          objmember.score =
            -(2 + ourMember.townhallLevel * 0.1) * objmember.title.drop;
          objmember.title.keyWarrior = 0;
          objmember.title.giantSlayer = 0;
          objmember.title.lastHit = false;
        } else {
          objmember.score +=
            objmember.title.keyWarrior * (1 + ourMember.townhallLevel * 0.01);
          objmember.score += objmember.title.giantSlayer * 2;
          objmember.score += attacksArr.length;
          if (
            objmember.title.keyWarrior > 0 &&
            war.clan.destructionPercentage === 100
          ) {
            const hasLastAttack = attacksArr.some((a) => a.order === maxOrder);
            if (hasLastAttack) {
              objmember.title.lastHit = true;
              objmember.score += 2;
            }
          }
        }
        membersOfwarScore.push(objmember);
      });

      const newScore = new WarScore({
        war: war._id,
        result: concludeWarResult(war),
        members: membersOfwarScore,
        addscore: false,
      });

      await newScore.save();
    }
    console.log("‚úÖ Ho√†n t·∫•t t√≠nh warScore cho c√°c tr·∫≠n war m·ªõi.");
  } catch (err) {
    console.error("‚ùå L·ªói khi sync WarScores:", err);
  }
});

// T√≠nh ƒëi·ªÉm h√†ng ng√†y cho t·∫•t c·∫£ players
async function calculateDailyPoints() {
  try {
    const today = getVNDate(0);
    const yesterday = getVNDate(-1);

    console.log(
      `üîÑ B·∫Øt ƒë·∫ßu t√≠nh ƒëi·ªÉm cho ng√†y ${today}, d·ª±a v√†o d·ªØ li·ªáu ${yesterday}`
    );

    const yesterdayPoints = await DaylyPoint.find({ date: yesterday }).lean();
    const clans = await PlayerSV01.find().lean();

    let processedCount = 0;
    let errorCount = 0;

    for (const clan of clans) {
      for (const player of clan.player) {
        try {
          // T√¨m ƒëi·ªÉm h√¥m qua
          const prevPoint = yesterdayPoints.find(
            (p) => p.tag === player.tag && p.clantag === clan.clantag
          ) || {
            warPoints: { value: 0, hidden: false },
            InfluencePoints: { value: 0, hidden: false },
            activepoints: { value: 0, hidden: false },
            clanGamePoints: { value: 0, hidden: false },
            attackWins: 0,
          };

          // S·ª≠ d·ª•ng h√†m t√≠nh ƒëi·ªÉm chung
          const newPoints = await calculatePlayerPoints(
            player,
            prevPoint,
            clan.clantag
          );

          // C·∫≠p nh·∫≠t ho·∫∑c t·∫°o m·ªõi record
          await DaylyPoint.updateOne(
            { tag: player.tag, clantag: clan.clantag, date: today },
            {
              $set: {
                attackWins: player.attackWins,
                ...newPoints,
              },
              $setOnInsert: {
                tag: player.tag,
                clantag: clan.clantag,
                name: player.name,
                date: today,
              },
            },
            { upsert: true }
          );

          processedCount++;
        } catch (error) {
          console.error(
            `‚ùå L·ªói khi x·ª≠ l√Ω player ${player.name} (${player.tag}):`,
            error
          );
          errorCount++;
        }
      }
    }

    console.log(
      `‚úÖ Ho√†n t·∫•t t√≠nh ƒëi·ªÉm h√†ng ng√†y. ƒê√£ x·ª≠ l√Ω: ${processedCount}, L·ªói: ${errorCount}`
    );
  } catch (err) {
    console.error("‚ùå L·ªói khi t√≠nh ƒëi·ªÉm:", err);
  }
}

// H√†m c·∫≠p nh·∫≠t d·ªØ li·ªáu warpoint li√™n t·ª•c
async function updateWarPoints() {
  try {
    const alliances = await Alliance.find({});
    for (const alliance of alliances) {
      for (const member of alliance.members) {
        const clanTag = member.tag;
        const wars = await WarDetail.find({ "clan.tag": clanTag })
          .sort({ endTime: -1 })
          .limit(20)
          .lean();

        const playerStatsMap = new Map();

        for (const war of wars) {
          const warScore = await WarScore.findOne({ war: war._id }).lean();
          if (!warScore || !warScore.members) continue;

          for (const memberScore of warScore.members) {
            const stats = playerStatsMap.get(memberScore.tag) || {
              playerTag: memberScore.tag,
              name: memberScore.name,
              totalScore: 0,
              totalAttacks: 0,
              warsPlayed: 0,
              titles: {
                keyWarrior: 0,
                giantSlayer: 0,
                drop: 0,
                lastHit: 0,
              },
            };

            stats.totalScore += memberScore.score;
            stats.totalAttacks += memberScore.attacks;
            stats.warsPlayed += 1;
            stats.titles.keyWarrior += memberScore.title.keyWarrior || 0;
            stats.titles.giantSlayer += memberScore.title.giantSlayer || 0;
            stats.titles.drop += memberScore.title.drop || 0;
            stats.titles.lastHit += memberScore.title.lastHit ? 1 : 0;

            playerStatsMap.set(memberScore.tag, stats);
          }
        }

        const players = Array.from(playerStatsMap.values());
        await ClanStats.updateOne(
          { clanTag },
          { clanTag, players, updatedAt: new Date() },
          { upsert: true }
        );
      }
    }
    console.log("‚úÖ Ho√†n t·∫•t c·∫≠p nh·∫≠t war points cho c√°c clan.");
  } catch (err) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t war points:", err);
  }
}

// H√†m ph√°t hi·ªán ng∆∞·ªùi ch∆°i m·ªõi trong clan v√† t·∫°o daylyPoint h√¥m nay cho h·ªç
async function detectNewPlayers() {
  try {
    const today = getVNDate(0);
    const clans = await ClanSV01.find().lean();

    let newPlayersCount = 0;

    for (const clan of clans) {
      for (const player of clan.memberList) {
        // Ki·ªÉm tra xem player ƒë√£ c√≥ record h√¥m nay ch∆∞a
        const existsToday = await DaylyPoint.exists({
          tag: player.tag,
          clantag: clan.tag,
          date: today,
        });

        if (existsToday) continue;

        // T√¨m record g·∫ßn nh·∫•t c·ªßa player n√†y trong clan n√†y
        const lastRecord = await DaylyPoint.findOne({
          tag: player.tag,
          clantag: clan.tag,
        })
          .sort({ date: -1 })
          .lean();

        // T·∫°o prevPoint t·ª´ record cu·ªëi ho·∫∑c d√πng m·∫∑c ƒë·ªãnh
        const prevPoint = lastRecord || {
          warPoints: { value: 0, hidden: false },
          InfluencePoints: { value: 0, hidden: false },
          activepoints: { value: 0, hidden: false },
          clanGamePoints: { value: 0, hidden: false },
          attackWins: 0,
        };

        // S·ª≠ d·ª•ng h√†m t√≠nh ƒëi·ªÉm chung
        const newPoints = await calculatePlayerPoints(
          player,
          prevPoint,
          clan.tag
        );

        // T·∫°o record m·ªõi cho player
        await DaylyPoint.create({
          tag: player.tag,
          clantag: clan.tag,
          name: player.name,
          date: today,
          attackWins: player.attackWins,
          ...newPoints,
        });

        newPlayersCount++;
        console.log(
          `‚ûï T·∫°o record m·ªõi cho player ${player.name} trong clan ${clan.tag}`
        );
      }
    }

    console.log(
      `‚úÖ Ho√†n t·∫•t ph√°t hi·ªán ng∆∞·ªùi ch∆°i m·ªõi. ƒê√£ t·∫°o ${newPlayersCount} records m·ªõi.`
    );
  } catch (err) {
    console.error("‚ùå L·ªói khi ph√°t hi·ªán ng∆∞·ªùi ch∆°i m·ªõi:", err);
  }
}

// H√†m t·ª± ƒë·ªông ping server gi·ªØ cho server kh√¥ng b·ªã ng·ªß
async function autoPing() {
  try {
    await axios.get(process.env.URL_server);
  } catch (error) {
    // Kh√¥ng c·∫ßn log l·ªói ping
  }
}

function scheduleJob(cronExpression, jobFunction) {
  cron.schedule(cronExpression, jobFunction, {
    scheduled: true,
    timezone: "Asia/Ho_Chi_Minh",
  });
}

// Schedule job ch·∫°y 00:01 h√†ng ng√†y
scheduleJob("1 0 * * *", calculateDailyPoints);
console.log("ƒê√£ l√™n l·ªãch t√≠nh ƒëi·ªÉm h√†ng ng√†y v√†o 00:01");

// Schedule job ch·∫°y 3 ph√∫t 1 l·∫ßn ƒë·ªÉ c·∫≠p nh·∫≠t war points
scheduleJob("*/3 * * * *", updateWarPoints);
console.log("ƒê√£ l√™n l·ªãch c·∫≠p nh·∫≠t war points m·ªói 3 ph√∫t");

// Schedule job ch·∫°y 5 ph√∫t 1 l·∫ßn ƒë·ªÉ ping server
scheduleJob("*/5 * * * *", autoPing);
console.log("ƒê√£ l√™n l·ªãch ping server m·ªói 5 ph√∫t");

// Schedule job ch·∫°y 30 gi√¢y 1 l·∫ßn ƒë·ªÉ ph√°t hi·ªán ng∆∞·ªùi ch∆°i m·ªõi
scheduleJob("*/30 * * * * *", detectNewPlayers);
console.log("ƒê√£ l√™n l·ªãch ph√°t hi·ªán ng∆∞·ªùi ch∆°i m·ªõi m·ªói 30 gi√¢y");

// Export h√†m t√≠nh ƒëi·ªÉm ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng ·ªü n∆°i kh√°c
export { calculatePlayerPoints, scheduleJob };
